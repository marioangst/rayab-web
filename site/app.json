[{"name":"app.R","content":"library(shiny)\nlibrary(rayab)\nlibrary(magick)\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"ðŸ¤– ðŸ§¶\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Text -----\n      h2(\"Knit text\"),\n      textInput(inputId = \"text\",\n                label = \"Enter text. Use \\\\n to break lines.\",\n                value = \"AYAB\"),\n      numericInput(inputId = \"textWidth\",\n                   value = 200,\n                   label = \"desired text image width\"),\n      numericInput(inputId = \"textHeight\",\n                   value = 100,\n                   label = \"desired text image height\"),\n      downloadButton(\"downloadTextImage\",\n                     \"Download text image\"),\n      h2(\"Upload and convert image\"),\n      fileInput(\"upload\", \"Upload image to convert for knitting\",\n                accept = c('image/png', 'image/jpeg')),\n      numericInput(inputId = \"convertWidth\",\n                   value = 200,\n                   label = \"desired converted image width\"),\n      numericInput(inputId = \"convertHeight\",\n                   value = 100,\n                   label = \"desired converted image height\"),\n      downloadButton(\"downloadConvertImage\",\n                     \"Download converted image\"),\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Image ----\n      imageOutput(outputId = \"textImage\"),\n      imageOutput(outputId = \"convertImage\")\n\n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output, session) {\n\n  # text conversion section -----------\n\n  textImage <- reactive({\n    # write image to tmpfile to send out again\n    tmpfile <-\n      rayab::text_to_ayab(input_text = input$text,\n                          width = input$textWidth,\n                          height = input$textHeight) |>\n      image_write(tempfile(fileext='png'), format = 'png')\n    list(src = tmpfile, contentType = \"image/png\")\n  })\n\n  output$textImage <- renderImage({\n    textImage()\n  },deleteFile = FALSE)\n\n  output$downloadTextImage <- downloadHandler(\n    filename = function() {\n      \"knit_me.png\"\n    },\n    content = function(file) {\n      img <- textImage()$src\n      file.copy(img, file)\n    }\n  )\n\n  # image conversion section ----------\n\n  # Start with placeholder imae\n  uploadedImage <- magick::logo\n\n  # When uploading new image\n  observeEvent(input$upload, {\n    if (length(input$upload$datapath))\n      uploadedImage <<- image_read(input$upload$datapath)\n  })\n\n  convertImage <- reactive({\n    # write image to tmpfile to send out again\n    tmpfile <-\n      uploadedImage |>\n      rayab::magick_to_ayab(\n        width = input$convertWidth,\n        height = input$convertHeight) |>\n      image_write(tempfile(fileext='png'), format = 'png')\n    list(src = tmpfile, contentType = \"image/png\")\n  })\n\n  output$convertImage <- renderImage({\n    convertImage()\n  },deleteFile = FALSE)\n\n  output$downloadConvertImage <- downloadHandler(\n    filename = function() {\n      \"knit_me.png\"\n    },\n    content = function(file) {\n      img <- convertImage()$src\n      file.copy(img, file)\n    }\n  )\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n","type":"text"}]
